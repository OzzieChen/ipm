<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.xssu.ipm.mapper.ResourceMapper">
	<resultMap type="Resource" id="resourceMap">
		<id property="id" column="parent_id" />
		<result property="name" column="pname" />
		<result property="icon" column="picon" />
		<result property="ordr" column="pordr" />
		<result property="parentId" column="pparent_id" />
		<collection property="children" ofType="Resource">
			<id property="id" column="id" />
			<result property="name" column="name" />
			<result property="parentId" column="parent_id" />
			<result property="resKey" column="res_key" />
			<result property="resUrl" column="res_url" />
			<result property="icon" column="icon" />
			<result property="type" column="type" />
			<result property="description" column="description" />
			<result property="parentIds" column="parent_ids" />
			<result property="openWay" column="openWay" />
			<result property="ordr" column="ordr" />
		</collection>
	</resultMap>

	<select id="findResourcesByKey" resultMap="resourceMap">
		select p.icon picon,p.parent_id pparent_id,p.name pname,p.ordr pordr,c.*
		from
		(select * from resource where type='menu' and parent_id>0) c
		left join resource p on c.parent_id=p.id order by pordr asc,c.ordr asc
	</select>

	<!-- <resultMap type="Resource" id="resChildrenMap2">
		<result property="name" column="pname" />
		<collection property="children" ofType="Resource">
			<id property="id" column="id" />
			<result property="name" column="name" />
			<result property="parentId" column="parent_id" />
			<result property="resKey" column="res_key" />
			<result property="resUrl" column="res_url" />
			<result property="icon" column="icon" />
			<result property="type" column="type" />
			<result property="description" column="description" />
			<result property="parentIds" column="parent_ids" />
			<result property="openWay" column="openWay" />
			<result property="checked" column="checked" />
		</collection>
	</resultMap>

	<select id="findResAndChildrenByRoleId" resultMap="resChildrenMap2">
		select p.name pname,c.*
		from (select * from resource where id in (select res_id from role_res where role_id=#{value})
		and parent_id>0 and level
		> 0) c
		left
		join
		resource p on c.parent_id=p.id
	</select>

	<select id="findResources" parameterType="Resource" resultType="Resource">
		select * from resource
		<where>
			level > 0
			<if test="parentId!=null">
				and parent_id &lt; #{parentId}
			</if>
			<if test="type!=null and type!=''">
				and type = #{type}
			</if>
			<if test="resKey!=null">
				and res_key = #{resKey}
			</if>
			<if test="name!=null and name!=''">
				and name like concat(concat('%',#{name}),'%')
			</if>
		</where>
		order by parent_ids asc
	</select>

	<select id="findResPListByKeys" resultMap="resourceMap">
		select p.icon picon,p.parent_id pparent_id,p.name pname,p.ordr pordr,c.*
		from
		(select * from resource where res_key in
		<foreach collection="attrs" item="item" open="(" separator="," close=")">
			#{item}
		</foreach>
		and parent_id>0 and level>0) c
		left join resource p on c.parent_id=p.id
	</select>

	<select id="findResourcesByAttr" resultType="Resource">
		select * from resource where ${attr} in
		<foreach collection="attrs" item="item" open="(" separator="," close=")">
			#{item}
		</foreach>
		and level > 0
		order by parent_ids
	</select>

	<select id="findResAttrByResIds" resultType="String">
		select ${attr} from resource where id in
		<foreach collection="ids" item="item" open="(" separator="," close=")">
			#{item}
		</foreach>
		and level > 0
	</select> -->
</mapper>